})
data.frame("y" = as.ordered(y), "x1" = x1, "x2" = x2)
}
# Simulate data
set.seed(977)
df4 <- simInteractionData(n = 2000)
table(df4$y)
library(ordinal)
fit1 <- clm(y ~ x1 + x2, data = df4)
fit2 <- clm(y ~ x1*x2, data = df4)
library(ggplot2)
set.seed(1105)
p1 <- ggplot(cbind(df4, res = resids(fit1, nsim = 25)), aes(x = x1, y = res)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
facet_wrap( ~ x2) +
ylab("Surrogate residual")
p2 <- ggplot(cbind(df4, res = resids(fit2, nsim = 25)), aes(x = x1, y = res)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
facet_wrap( ~ x2) +
ylab("Surrogate residual")
grid.arrange(p1, p2, nrow = 2)
source('~/.active-rstudio-document', echo=TRUE)
fit1 <- clm(y ~ x1 + x2, data = df4, link = "probit")
source('~/.active-rstudio-document', echo=TRUE)
summary(fit2)
table(df4$y)
set.seed(1105)
p1 <- ggplot(cbind(df4, res = resids(fit1, nsim = 25)), aes(x = x1, y = res)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
facet_wrap( ~ x2) +
ylab("Surrogate residual")
p2 <- ggplot(cbind(df4, res = resids(fit2, nsim = 25)), aes(x = x1, y = res)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
facet_wrap( ~ x2) +
ylab("Surrogate residual")
pdf(file = "interaction.pdf", width = 7, height = 7)
grid.arrange(p1, p2, nrow = 2)
dev.off()
ordinalize <- function(z, threshold) {
sapply(z, FUN = function(x) {
ordinal.value <- 1
index <- 1
while(index <= length(threshold) && x > threshold[index]) {
ordinal.value <- ordinal.value + 1
index <- index + 1
}
ordinal.value
})
}
# Function to simulate interaction data
simInteractionData <- function(n = 2000) {
x1 <- runif(n, min = 1, max = 7)
x2 <- gl(2, n / 2, labels = c("Control", "Treatment"))
z <- 16 + 8 * x1 + 3 * (x2 == "Treatment") + 5 * x1 * (x2 == "Treatment") +
rnorm(n)
y <- ordinalize(z, threshold = c(40, 60, 80))
data.frame("y" = as.ordered(y), "x1" = x1, "x2" = x2)
}
# Simulate data
set.seed(977)
df4 <- simInteractionData(n = 2000)
table(df4$y)
simInteractionData <- function(n = 2000) {
threshold <- c(40, 60, 80)
x1 <- runif(n, min = 1, max = 7)
x2 <- gl(2, n / 2, labels = c("Control", "Treatment"))
z <- 16 + 8 * x1 + 3 * (x2 == "Treatment") + 5 * x1 * (x2 == "Treatment") +
rnorm(n)
y <- sapply(z, FUN = function(zz) {
ordinal.value <- 1
index <- 1
while(index <= length(threshold) && zz > threshold[index]) {
ordinal.value <- ordinal.value + 1
index <- index + 1
}
ordinal.value
})
data.frame("y" = as.ordered(y), "x1" = x1, "x2" = x2)
}
# Simulate data
set.seed(977)
df4 <- simInteractionData(n = 2000)
table(df4$y)
sales <- read.csv("C:\\Users\\greenweb\\Desktop\\Data sets\\sales.csv",
header = TRUE)
library(ggplot2)
library(sure)
library(VGAM)
fit <- vglm(as.ordered(Quality) ~ SalesPrice + YearBuilt + FinishedSqFt +
NumBathRms, data = sales, family = cumulative(parallel = TRUE))
table(sales$Quality)
fit <- randomForest(Quality ~ ., data = sales)
library(randomForest)
fit <- randomForest(Quality ~ ., data = sales)
fit <- randomForest(as.factor(Quality) ~ ., data = sales)
plot(fit)
summary(fit)
fit
varImpPlot(fit)
fit <- randomForest(as.factor(Quality) ~ ., data = sales, importance = TRUE)
varImpPlot(fit)
library(pdp)
partial(fit, pred.var = c("SalesPrice", "Style"), plot = TRUE)
sapply(sales, class)
head(sales)
sapply(sales, FUN = function(x) length(unique(x)))
sales$Quality <- as.factor(sales$Quality)
sales$Quality <- as.ordered(sales$Quality)
sales <- read.csv("C:\\Users\\greenweb\\Desktop\\Data sets\\sales.csv",
header = TRUE)
library(ggplot2)
library(randomForest)
library(sure)
library(VGAM)
sales$AirCon <- as.factor(sales$AirCon)
sales$Pool <- as.factor(sales$Pool)
sales$AdjHighWay <- as.factor(sales$AdjHighWay)
sales$Quality <- as.ordered(sales$Quality)
set.seed(101)
sales.rf <- randomForest(Quality ~ ., data = sales, importance = TRUE)
plot(sales.rd)
plot(sales.rf)
sales.rf
varImpPlot(sales.rf)
partial(sales.rf, pred.var = c("YearBuilt", "AirCon"), plot = TRUE)
partial(sales.rf, pred.var = c("SalesPrice", "AirCon"), plot = TRUE)
partial(sales.rf, pred.var = c("FinishedSqFt", "AirCon"), plot = TRUE)
partial(sales.rf, pred.var = c("LotSize", "AirCon"), plot = TRUE)
sales.vglm <- vglm(Quality ~ SalesPrice + YearBuilt + FinishedSqFt
NumBathRms + AirCon, data = sales,
family = cumulative(parallel = TRUE))
sales.vglm <- vglm(Quality ~ SalesPrice + YearBuilt + FinishedSqFt +
NumBathRms + AirCon, data = sales,
family = cumulative(parallel = TRUE))
summary(sales.vglm)
partial(sales.rf, pred.var = c("NumBathRms", "AirCon"), plot = TRUE)
dim(sales)
table(sales$Quality)
z <- sales
z$Quality <- ifelse(z$Quality <= 2, 1, 2)
table(z$Quality)
library(earth)
fit <- earth(as.factor(Quality) ~ ., data = z, degree = 2, family = binomial())
fit <- earth(as.factor(Quality) ~ ., data = z, degree = 2, glm=list(family = binomial))
fit
summary(fit)
fit <- earth(as.factor(Quality) ~ .-Style, data = z, degree = 2, glm=list(family = binomial))
fit
summary(fit)
partial(sales.rf, pred.var = c("SalesPrice", "AirCon"), plot = TRUE)
sales.vglm <- vglm(Quality ~ SalesPrice + YearBuilt + FinishedSqFt +
NumBathRms + AirCon, data = sales,
family = cumulative(parallel = TRUE))
ggplot(cbind(sales, res = resids(fit.vglm, nsim = 25)),
aes(x = SalesPrice, y = res)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
facet_wrap( ~ x2) +
ylab("Surrogate residual")
ggplot(cbind(sales, res = resids(sales.vglm, nsim = 25)),
aes(x = SalesPrice, y = res)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
facet_wrap( ~ AirCon) +
ylab("Surrogate residual")
sales.vglm <- vglm(Quality ~ SalesPrice + YearBuilt + FinishedSqFt +
NumBathRms + AirCon * SalesPrice, data = sales,
family = cumulative(parallel = TRUE))
coef(sales.vglm)
ggplot(cbind(sales, res = resids(sales.vglm, nsim = 25)),
aes(x = SalesPrice, y = res)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
facet_wrap( ~ AirCon) +
ylab("Surrogate residual")
?ordinal::wine
wine.clm <- clm(rating ~ temp * contact, data = wine)
names(wine)
data(wine, package = "ordinal")
names(wine)
wine.clm <- clm(rating ~ temp * contact, data = wine)
summary(wine.clm)
wine.clm <- clm(rating ~ temp + contact, data = wine)
summary(wine.clm)
autoplot(wine.clm, what = "qq")
autoplot(update(wine.clm, link = "probit"), what = "qq")
wine.logit <- clm(rating ~ temp + contact, data = wine)
wine.probit <- clm(rating ~ temp + contact, data = wine, link = "probit")
plot(gof(wine.logit, nsim = 100))
plot(gof(wine.probit, nsim = 100))
plot(gof(wine.probit, nsim = 500))
plot(gof(wine.logit, nsim = 500))
plot(gof(update(wine.logit, link = "loglog"), nsim = 500))
plot(gof(update(wine.logit, link = "cloglog"), nsim = 500))
plot(gof(update(wine.logit, link = "cuchit"), nsim = 500))
plot(gof(update(wine.logit, link = "cauchit"), nsim = 500))
plot(gof(update(wine.logit, link = "cauchit"), nsim = 500))
plot(gof(wine.logit, nsim = 500))
plot(gof(wine.probit, nsim = 500))
grid.arrange(
autoplot(wine.clm, nsim = 10, what = "qq"),
autoplot(wine.clm, nsim = 10, what = "fitted"),
autoplot(wine.clm, nsim = 10, what = "cov", x = wine$temp),
autoplot(wine.clm, nsim = 10, what = "cov", x = wine$contact),
ncol = 2
)
table(wine$rating)
fit <- randomForest(rating ~ temp + contact, data = wine, importance = TRUE)
fit
outlier(fit)
fit <- randomForest(rating ~ temp + contact, data = wine, importance = TRUE, proximity = TRUE)
outlier(fit)
plot(outlier(fit))
head(wine, 20)
which.max(outlier(fit))
res <- resids(wine.clm)
which.min(res)
plot(res)
fit <- randomForest(response ~ temp + contact, data = wine, importance = TRUE, proximity = TRUE)
fit
plot(fit)
plot(outlier(fit))
plot(outlier(fit))
heatmap(proximity(fit))
heatmap(fit$proximity)
varImpPlot(fit)
set.seed(1225)  # for reproducibility
grid.arrange(
autoplot(wine.clm, nsim = 25, what = "qq"),
autoplot(wine.clm, nsim = 25, what = "fitted", alpha = 0.5),
autoplot(wine.clm, nsim = 25, what = "cov", x = wine$temp),
autoplot(wine.clm, nsim = 25, what = "cov", x = wine$contact),
ncol = 2
)
?autoplot.resid
grid.arrange(
autoplot(wine.clm, nsim = 25, what = "qq"),
autoplot(wine.clm, nsim = 25, what = "fitted", alpha = 0.5),
autoplot(wine.clm, nsim = 25, what = "cov", x = wine$temp),
autoplot(wine.clm, nsim = 25, what = "cov", x = wine$contact),
ncol = 2
)
set.seed(1225)  # for reproducibility
grid.arrange(
autoplot(wine.clm, nsim = 25, what = "qq"),
autoplot(wine.clm, nsim = 10, what = "fitted", alpha = 0.5),
autoplot(wine.clm, nsim = 25, what = "cov", x = wine$temp),
autoplot(wine.clm, nsim = 25, what = "cov", x = wine$contact),
ncol = 2
)
set.seed(1225)  # for reproducibility
grid.arrange(
autoplot(wine.clm, nsim = 25, what = "qq"),
autoplot(wine.clm, nsim = 20, what = "fitted", alpha = 0.5),
autoplot(wine.clm, nsim = 25, what = "cov", x = wine$temp),
autoplot(wine.clm, nsim = 25, what = "cov", x = wine$contact),
ncol = 2
)
set.seed(1225)  # for reproducibility
grid.arrange(
autoplot(wine.clm, nsim = 10, what = "qq"),
autoplot(wine.clm, nsim = 10, what = "fitted", alpha = 0.5),
autoplot(wine.clm, nsim = 10, what = "cov", x = wine$temp),
autoplot(wine.clm, nsim = 10, what = "cov", x = wine$contact),
ncol = 2
)
?wine
set.seed(1225)  # for reproducibility
grid.arrange(
autoplot(wine.clm, nsim = 10, what = "qq"),
autoplot(wine.clm, nsim = 10, what = "fitted", alpha = 0.5),
autoplot(wine.clm, nsim = 10, what = "cov", x = wine$temp,
xlab = "Temperature"),
autoplot(wine.clm, nsim = 10, what = "cov", x = wine$contact,
xlab = "Contact"),
ncol = 2
)
# Figure ?
pdf(file = "wine.pdf", width = 7, height = 5)
set.seed(1225)  # for reproducibility
grid.arrange(
autoplot(wine.clm, nsim = 10, what = "qq"),
autoplot(wine.clm, nsim = 10, what = "fitted", alpha = 0.5),
autoplot(wine.clm, nsim = 10, what = "cov", x = wine$temp,
xlab = "Temperature"),
autoplot(wine.clm, nsim = 10, what = "cov", x = wine$contact,
xlab = "Contact"),
ncol = 2
)
dev.off()
plot(gof(wine.clm, nsim = 500))
set.seed(1105)
p1 <- ggplot(cbind(df4, sur = surrogate(fit1, nsim = 25)), aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
facet_wrap( ~ x2) +
ylab("Surrogate residual")
p2 <- ggplot(cbind(df4, sur = surrogate(fit2, nsim = 25)), aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
facet_wrap( ~ x2) +
ylab("Surrogate residual")
grid.arrange(p1, p2, nrow = 2)
fit1 <- clm(y ~ x1 + x2, data = df4, link = "probit")  # wrong model
fit2 <- clm(y ~ x1*x2, data = df4, link = "probit")  # correct model
ggplot(cbind(df4, sur = surrogate(fit1, nsim = 25)), aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
facet_wrap( ~ x2) +
ylab("Surrogate residual")
simInteractionData <- function(n = 2000) {
threshold <- c(0, 20, 40)
x1 <- runif(n, min = 1, max = 7)
x2 <- gl(2, n / 2, labels = c("Control", "Treatment"))
z <- 16 - 5 * x1 + 3 * (x2 == "Treatment") + 10 * x1 * (x2 == "Treatment") +
rnorm(n)
y <- sapply(z, FUN = function(zz) {
ordinal.value <- 1
index <- 1
while(index <= length(threshold) && zz > threshold[index]) {
ordinal.value <- ordinal.value + 1
index <- index + 1
}
ordinal.value
})
data.frame("y" = as.ordered(y), "x1" = x1, "x2" = x2)
}
# Simulate data
set.seed(977)
df4 <- simInteractionData(n = 2000)
table(df4$y)
fit1 <- clm(y ~ x1 + x2, data = df4, link = "probit")  # wrong model
fit2 <- clm(y ~ x1*x2, data = df4, link = "probit")  # correct model
ggplot(cbind(df4, sur = surrogate(fit1, nsim = 25)), aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
facet_wrap( ~ x2) +
ylab("Surrogate residual")
ggplot(cbind(df4, sur = surrogate(fit2, nsim = 25)), aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
facet_wrap( ~ x2) +
ylab("Surrogate residual")
simInteractionData <- function(n = 2000) {
threshold <- c(0, 20, 40)
x1 <- runif(n, min = 1, max = 7)
x2 <- gl(2, n / 2, labels = c("Control", "Treatment"))
z <- 16 - 5 * x1 + 3 * (x2 == "Treatment") + 10 * x1 * (x2 == "Treatment") +
rnorm(n)
y <- sapply(z, FUN = function(zz) {
ordinal.value <- 1
index <- 1
while(index <= length(threshold) && zz > threshold[index]) {
ordinal.value <- ordinal.value + 1
index <- index + 1
}
ordinal.value
})
data.frame("y" = as.ordered(y), "x1" = x1, "x2" = x2)
}
# Simulate data
set.seed(977)
df4 <- simInteractionData(n = 2000
library(ggplot2)
library(ordinal)
library(sure)
fit1 <- clm(y ~ x1, data = df4[df4$x2=="Control",], link = "probit")
fit2 <- clm(y ~ x1, data = df4[df4$x2=="Treatment",], link = "probit")
fit3 <- clm(y ~ x1*x2, data = df4, link = "probit")
set.seed(1105)
p1 <- ggplot(cbind(df4[df4$x2=="Control",], sur = surrogate(fit1, nsim = 25)), aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate variable")+xlab("x1 (x2=Control)")
p2 <- ggplot(cbind(df4[df4$x2=="Treatment",], sur = surrogate(fit2, nsim = 25)), aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate variable")+xlab("x1 (x2=Treatment)")
grid.arrange(p1, p2, ncol = 2)
fit1
fit3
fit2
ggplot(d2, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(x[1]))
d2 <- cbind(df4[df4$x2 == "Treatment", ], sur = surrogate(fit2, nsim = 25))
ggplot(d2, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(x[1]))
ggplot(d2, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(paste(expression(x[1])), "(treatment)")
ggplot(d2, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(paste(expression(x[1]), "(treatment)"))
ggplot(d2, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1]), "(treatment)"))
ggplot(d2, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1], "(treatment)")))
set.seed(1105)
d1 <- cbind(df4[df4$x2 == "Control",], sur = surrogate(fit1, nsim = 25))
d2 <- cbind(df4[df4$x2 == "Treatment", ], sur = surrogate(fit2, nsim = 25))
p1 <- ggplot(d1, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1], " (control)")))
p2 <- ggplot(d2, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1], " (treatment)")))
grid.arrange(p1, p2, ncol = 2)
?clm
?lm
?glm.convert
?nls
set.seed(1105)
d1 <- cbind(df4[df4$x2 == "Control",], sur = surrogate(fit1, nsim = 25))
d2 <- cbind(df4[df4$x2 == "Treatment", ], sur = surrogate(fit2, nsim = 25))
p1 <- ggplot(d1, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1], " (control)")))
p2 <- ggplot(d2, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1], " (treatment)")))
pdf(file = "interaction.pdf", width = 7, height = 7)
grid.arrange(p1, p2, ncol = 2)
dev.off()
fit <- clm(y ~ x1/x2, data = df4)
fit
pdf(file = "interaction.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)
dev.off()
x <- c(0.4, 0.7, 1.3, 2.8, 3.9, 6.0, 6.1)
mean(x)
median(x)
sd(x)
mean(100*x)
msd(100*x)
sd(100*x)
# Load the data set
ultra <- read.csv(file = file.choose(), header = TRUE)
# Create a new variable called time; use $ to access the different columns
ultra$time <- ultra$hours * 60 + ultra$minutes + ultra$seconds / 60
# Recode gender to somethinf more meaningful
ultra$gender <- ifelse(ultra$gender == 0, "male", "female")
# Print the first 6 rows
head(ultra)
# Print a summary of the the data set
summary(ultra)
# To compute the sample variance/standard deviation use the var/sd functions.
# For example, to get the sample variance for the variable age, use:
var(ultra$age)
# To get the sample variance for each variable use
sapply(ultra, FUN = var)
mean(ultra$time)
mean(ultra$age)
which.min(ultra$time)
which.min(ultra$hours)
which.max(ultra$hours)
plot(age ~ time, data = ultea)
plot(age ~ time, data = ultra)
min(ultra$hours)
min(ultra$time)
# Subset the data by gender
males <- ultra[ultra$gender == "male", ]
females <- ultra[ultra$gender == "female", ]
# Compute the mean time for males
cat("The average time for males was", mean(males$time), "minutes \n")
# Compute the standard deviation of male times
cat("The standard deviation for male times was", sd(males$time), "minutes \n")
# Compute the mean time for females
cat("The average time for females was", mean(females$time), "minutes \n")
# Compute the standard deviation of female times
cat("The standard deviation for female times was", sd(females$time), "minutes \n")
# Histograms of running times for males and females
par(mfrow = c(1, 2))
hist(males$time, main = "Males", xlab = "Running time")
hist(females$time, main = "Females", xlab = "Running time")
boxplot(time ~ gender, data = ultra, notch = TRUE)
boxplot(time ~ gender, data = ultra, notch = TRUE)
histogram(~ time | gender, data = ultra, xlab = "Running time")
library(lattice)
histogram(~ time | gender, data = ultra, xlab = "Running time")
x <- c(105, 124, 102, 114, 96, 106)
c(mean(x), median(x), sd(x))
x - mean(x)
(x - mean(x))^2
sort(x)

dev.off()
ordinalize <- function(z, threshold) {
sapply(z, FUN = function(x) {
ordinal.value <- 1
index <- 1
while(index <= length(threshold) && x > threshold[index]) {
ordinal.value <- ordinal.value + 1
index <- index + 1
}
ordinal.value
})
}
# Function to simulate the data from Example 5 in Dungang and Zhang (2017).
simProportionalityData <- function(n = 2000) {
x <- runif(n, min = -3, max = 3)
z1 <- 0 - 1 * x + rnorm(n)
z2 <- 0 - 1.5 * x + rnorm(n)
y1 <- ordinalize(z1, threshold = c(-1.5, 0))
y2 <- ordinalize(z2, threshold = c(1, 3))
data.frame("y" = as.ordered(c(y1, y2)), "x" = c(x, x))
}
# Simulate data
set.seed(977)
df4 <- simProportionalityData(n = 2000)
table(df4$y)
# Fit separate models to the df4 data set and genrate the difference in
# surrogate values
fit1 <- vglm(y ~ x, data = df4[1:2000, ],
cumulative(link = probit, parallel = TRUE))
fit2 <- update(fit1, data = df4[2001:4000, ])
s1 <- surrogate(fit1)
s2 <- surrogate(fit2)
d <- data.frame(D = s1 - s2, X = df4[1:2000, ]$x)
# Scatterplot of D vs. X
p <- ggplot(d, aes(x = X, y = D)) +
geom_point() +
geom_smooth(se = FALSE, size = 1.2, color = "red")
# Figure ?
pdf(file = "proportionality.pdf", width = 7, height = 5)
print(p)
dev.off()
?set.seed
source('C:/Users/greenweb/Desktop/devel/sure-manuscript/greenwell-mccarthy-boehmke-liu.R', echo=TRUE)
# Fit separate models to the df4 data set and genrate the difference in
# surrogate values
fit1 <- vglm(y ~ x, data = df4[1:2000, ],
cumulative(link = probit, parallel = TRUE))
fit2 <- update(fit1, data = df4[2001:4000, ])
s1 <- surrogate(fit1)
s2 <- surrogate(fit2)
d <- data.frame(D = s1 - s2, x = df4[1:2000, ]$x)
# Scatterplot of D vs. x
p <- ggplot(d, aes(x = x, y = D)) +
geom_point(color = "#444444", shape = 19, size = 2) +
geom_smooth(se = FALSE, size = 1.2, color = "red")
# Figure ?
pdf(file = "proportionality.pdf", width = 7, height = 5)
print(p)
dev.off()
# Simulate data
set.seed(977)
df4 <- simProportionalityData(n = 2000)
table(df4$y)
# Fit separate models to the df4 data set and genrate the difference in
# surrogate values
fit1 <- vglm(y ~ x, data = df4[1:2000, ],
cumulative(link = probit, parallel = TRUE))
fit2 <- update(fit1, data = df4[2001:4000, ])
s1 <- surrogate(fit1)
s2 <- surrogate(fit2)
d <- data.frame(D = s1 - s2, x = df4[1:2000, ]$x)
# Scatterplot of D vs. x
p <- ggplot(d, aes(x = x, y = D)) +
geom_point(color = "#444444", shape = 19, size = 2) +
geom_smooth(se = FALSE, size = 1.2, color = "red")
# Figure ?
pdf(file = "proportionality.pdf", width = 7, height = 5)
print(p)
dev.off()
source('C:/Users/greenweb/Desktop/devel/sure-manuscript/greenwell-mccarthy-boehmke-liu.R', echo=TRUE)
# Simulate data
set.seed(977)
df4 <- simInteractionData(n = 2000)
library(ordinal)  # for clm function
fit1 <- clm(y ~ x1, data = df4[df4$x2 == "Control", ], link = "probit")
fit2 <- clm(y ~ x1, data = df4[df4$x2 == "Treatment", ], link = "probit")
set.seed(1105)  # for reproducibility
d1 <- cbind(df4[df4$x2 == "Control",], sur = surrogate(fit1, nsim = 25))
d2 <- cbind(df4[df4$x2 == "Treatment", ], sur = surrogate(fit2, nsim = 25))
p1 <- ggplot(d1, aes(x = x1, y = sur)) +
geom_point(color = "#444444", shape = 19, size = 2, alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1], " (control)")))
p2 <- ggplot(d2, aes(x = x1, y = sur)) +
geom_point(color = "#444444", shape = 19, size = 2, alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1], " (treatment)")))
pdf(file = "interaction.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)  # Figure 9
dev.off()
ggplot(data.frame(D = s1 - s2, x = df4[1:2000, ]$x) , aes(x = x, y = D)) +
geom_point(color = "#444444", shape = 19, size = 2) +
geom_smooth(se = FALSE)
# Simulate data
set.seed(977)
df4 <- simProportionalityData(n = 2000)
table(df4$y)
# Fit separate models (VGAM should already be loaded)
fit1 <- vglm(y ~ x, data = df4[1:2000, ],
cumulative(link = probit, parallel = TRUE))
fit2 <- update(fit1, data = df4[2001:4000, ])
# Generate surrogate response values
s1 <- surrogate(fit1)
s2 <- surrogate(fit2)
ggplot(data.frame(D = s1 - s2, x = df4[1:2000, ]$x) , aes(x = x, y = D)) +
geom_point(color = "#444444", shape = 19, size = 2) +
geom_smooth(se = FALSE)
pdf(file = "proportionality.pdf", width = 7, height = 5)
ggplot(data.frame(D = s1 - s2, x = df4[1:2000, ]$x) , aes(x = x, y = D)) +
geom_point(color = "#444444", shape = 19, size = 2) +
geom_smooth(se = FALSE, size = 1.2, color = "red")
dev.off()
library(MASS)  # for polr function
fit.polr <- polr(y ~ x + I(x ^ 2), data = df1, method = "probit")
library(sure)
set.seed(101)  # for reproducibility
sres <- resids(fit.polr)
autoplot(fit.polr, what = "qq")
autoplot(fit.polr, what = "qq")
autoplot(sres, what = "qq", distribution = pnorm)
qqnorm(sres)
res <- sres
distribution <- pnorm
x <- distribution(ppoints(length(res)))[order(order(res))]
qqline.y <- quantile(res, probs = c(0.25, 0.75),
names = FALSE, na.rm = TRUE)
qqline.x <- distribution(c(0.25, 0.75))
slope <- diff(qqline.y) / diff(qqline.x)
int <- qqline.y[1L] - slope * qqline.x[1L]
ggplot(data.frame(x = x, y = res), aes_string(x = "x", y = "y")) +
geom_point(color = qqpoint.color, shape = qqpoint.shape,
size = qqpoint.size) +
geom_abline(slope = slope, intercept = int, color = qqline.color,
linetype = qqline.linetype, size = qqline.size) +
labs(x = "Theoretical quantile", y = "Sample quantile")
ggplot(data.frame(x = x, y = res), aes_string(x = "x", y = "y")) +
geom_point() +
geom_abline(slope = slope, intercept = int, color = qqline.color,
linetype = qqline.linetype, size = qqline.size) +
labs(x = "Theoretical quantile", y = "Sample quantile")
ggplot(data.frame(x = x, y = res), aes_string(x = "x", y = "y")) +
geom_point() +
geom_abline(slope = slope, intercept = int) +
labs(x = "Theoretical quantile", y = "Sample quantile")
qqnorm
qqnorm.default
methods(qqnorm)
getAnywhere(qqnorm.default)
res <- sres
distribution <- qnorm
x <- distribution(ppoints(length(res)))[order(order(res))]
qqline.y <- quantile(res, probs = c(0.25, 0.75),
names = FALSE, na.rm = TRUE)
qqline.x <- distribution(c(0.25, 0.75))
slope <- diff(qqline.y) / diff(qqline.x)
int <- qqline.y[1L] - slope * qqline.x[1L]
ggplot(data.frame(x = x, y = res), aes_string(x = "x", y = "y")) +
geom_point() +
geom_abline(slope = slope, intercept = int) +
labs(x = "Theoretical quantile", y = "Sample quantile")
# Residual vs. covariate plot and Q-Q plot
library(ggplot2)  # needed for autoplot function
p1 <- autoplot(sres, what = "covariate", x = df1$x, xlab = "x")
p2 <- autoplot(sres, what = "qq", distribution = qnorm)
pdf(file = "quadratic-correct-surrogate.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)  # Figure 2
dev.off()
# Fit a cumulative link model with probit link
library(MASS)  # for polr function
fit.polr <- polr(y ~ x + I(x ^ 2), data = df1, method = "probit")
# Obtain the SBS/probability-scale residuals
library(PResiduals)
pres <- presid(fit.polr)
# Obtain surrogate residuals
library(sure)
set.seed(101)  # for reproducibility
sres <- resids(fit.polr)
# Residual vs. covariate plot and Q-Q plot
library(ggplot2)  # needed for autoplot function
p1 <- autoplot(sres, what = "covariate", x = df1$x, xlab = "x")
p2 <- autoplot(sres, what = "qq", distribution = qnorm)
pdf(file = "quadratic-correct-surrogate.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)  # Figure 2
dev.off()
autoplot(sres, what = "covariate", x = df1$x, xlab = "x")
sres
?autoplot.resid
# Fit a cumulative link model with probit link
library(MASS)  # for polr function
fit.polr <- polr(y ~ x + I(x ^ 2), data = df1, method = "probit")
# Obtain the SBS/probability-scale residuals
library(PResiduals)
pres <- presid(fit.polr)
# Residual vs. covariate plot and Q-Q plot
p1 <- ggplot(data.frame(x = df1$x, y = pres), aes(x, y)) +
geom_point(color = "#444444", shape = 19, size = 2, alpha = 0.5) +
geom_smooth(color = "red", se = FALSE) +
ylab("Probability-scale residual")
p2 <- ggplot(data.frame(y = pres), aes(sample = y)) +
stat_qq(distribution = qunif, dparams = list(min = -1, max = 1), alpha = 0.5) +
xlab("Sample quantile") +
ylab("Theoretical quantile")
pdf(file = "quadratic-correct-sbs.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)  # Figure 1
dev.off()
# Obtain surrogate residuals
library(sure)
set.seed(101)  # for reproducibility
sres <- resids(fit.polr)
# Residual vs. covariate plot and Q-Q plot
library(ggplot2)  # needed for autoplot function
p1 <- autoplot(sres, what = "covariate", x = df1$x, xlab = "x")
p2 <- autoplot(sres, what = "qq", distribution = qnorm)
pdf(file = "quadratic-correct-surrogate.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)  # Figure 2
dev.off()
# Fit a cumulative link model with probit link
library(sure)
library(MASS)  # for polr function
fit.polr <- polr(y ~ x + I(x ^ 2), data = df1, method = "probit")
# Obtain the SBS/probability-scale residuals
library(PResiduals)
pres <- presid(fit.polr)
# Residual vs. covariate plot and Q-Q plot
p1 <- ggplot(data.frame(x = df1$x, y = pres), aes(x, y)) +
geom_point(color = "#444444", shape = 19, size = 2, alpha = 0.5) +
geom_smooth(color = "red", se = FALSE) +
ylab("Probability-scale residual")
p2 <- ggplot(data.frame(y = pres), aes(sample = y)) +
stat_qq(distribution = qunif, dparams = list(min = -1, max = 1), alpha = 0.5) +
xlab("Sample quantile") +
ylab("Theoretical quantile")
pdf(file = "quadratic-correct-sbs.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)  # Figure 1
dev.off()
# Obtain surrogate residuals
library(sure)
set.seed(101)  # for reproducibility
sres <- resids(fit.polr)
# Residual vs. covariate plot and Q-Q plot
p1 <- autoplot(sres, what = "covariate", x = df1$x, xlab = "x")
p2 <- autoplot(sres, what = "qq", distribution = qnorm)
pdf(file = "quadratic-correct-surrogate.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)  # Figure 2
dev.off()
# Residual vs. covariate plots when quadratic term is removed from the model
fit2.polr <- update(fit.polr, y ~ x)
set.seed(1055)
p1 <- autoplot(fit2.polr, what = "covariate", x = df1$x, alpha = 0.5) +
xlab("x") +
ylab("Surrogate residual") +
ggtitle("")
p2 <- ggplot(data.frame(x = df1$x, y = presid(fit2.polr)), aes(x, y)) +
geom_point(color = "#444444", shape = 19, size = 2, alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
xlab("x") +
ylab("Probability-scale residual")
pdf(file = "quadratic.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)  # Figure 3
dev.off()
# Fit models with various link functions to the simulated data
fit.probit <- polr(y ~ x + I(x ^ 2), data = df3, method = "probit")
fit.logistic <- polr(y ~ x + I(x ^ 2), data = df3, method = "logistic")
fit.loglog <- polr(y ~ x + I(x ^ 2), data = df3, method = "loglog")  # correct link
fit.cloglog <- polr(y ~ x + I(x ^ 2), data = df3, method = "cloglog")
# Construct Q-Q plots of the surrogate residuals for each model
set.seed(1056)
p1 <- autoplot(fit.probit, nsim = 100, what = "qq")
p2 <- autoplot(fit.logistic, nsim = 100, what = "qq")
p3 <- autoplot(fit.loglog, nsim = 100, what = "qq")
p4 <-  autoplot(fit.cloglog, nsim = 100, what = "qq")
# Figure 6
pdf(file = "link.pdf", width = 7, height = 7)
grid.arrange(p1, p2, p3, p4, ncol = 2)  # bottom left plot is correct model
dev.off()
sample(9, size = 4, replace = T)
# Function to simulate the data from Example 5 in Dungang and Zhang (2017).
simProportionalityData <- function(n = 2000) {
x <- runif(n, min = -3, max = 3)
z1 <- 0 - 1 * x + rnorm(n)
z2 <- 0 - 1.5 * x + rnorm(n)
y1 <- ordinalize(z1, threshold = c(-1.5, 0))
y2 <- ordinalize(z2, threshold = c(1, 3))
data.frame("y" = as.ordered(c(y1, y2)), "x" = c(x, x))
}
# Simulate data
set.seed(977)
df4 <- simProportionalityData(n = 2000)
table(df4$y)
# Fit separate models (VGAM should already be loaded)
fit1 <- vglm(y ~ x, data = df4[1:2000, ],
cumulative(link = probit, parallel = TRUE))
fit2 <- update(fit1, data = df4[2001:4000, ])
# Generate surrogate response values
set.seed(8671)  # for reproducibility
s1 <- surrogate(fit1)
s2 <- surrogate(fit2)
# Figure 8
pdf(file = "proportionality.pdf", width = 7, height = 5)
ggplot(data.frame(D = s1 - s2, x = df4[1:2000, ]$x) , aes(x = x, y = D)) +
geom_point(color = "#444444", shape = 19, size = 2) +
geom_smooth(se = FALSE, size = 1.2, color = "red")
dev.off()
ordinalize <- function(z, threshold) {
sapply(z, FUN = function(x) {
ordinal.value <- 1
index <- 1
while(index <= length(threshold) && x > threshold[index]) {
ordinal.value <- ordinal.value + 1
index <- index + 1
}
ordinal.value
})
}
# Function to simulate the data from Example 5 in Dungang and Zhang (2017).
simProportionalityData <- function(n = 2000) {
x <- runif(n, min = -3, max = 3)
z1 <- 0 - 1 * x + rnorm(n)
z2 <- 0 - 1.5 * x + rnorm(n)
y1 <- ordinalize(z1, threshold = c(-1.5, 0))
y2 <- ordinalize(z2, threshold = c(1, 3))
data.frame("y" = as.ordered(c(y1, y2)), "x" = c(x, x))
}
# Simulate data
set.seed(977)
df4 <- simProportionalityData(n = 2000)
table(df4$y)
# Fit separate models (VGAM should already be loaded)
fit1 <- vglm(y ~ x, data = df4[1:2000, ],
cumulative(link = probit, parallel = TRUE))
fit2 <- update(fit1, data = df4[2001:4000, ])
# Generate surrogate response values
set.seed(8671)  # for reproducibility
s1 <- surrogate(fit1)
s2 <- surrogate(fit2)
# Figure 8
pdf(file = "proportionality.pdf", width = 7, height = 5)
ggplot(data.frame(D = s1 - s2, x = df4[1:2000, ]$x) , aes(x = x, y = D)) +
geom_point(color = "#444444", shape = 19, size = 2) +
geom_smooth(se = FALSE, size = 1.2, color = "red")
dev.off()
library(sure)
library(VGAM)
ordinalize <- function(z, threshold) {
sapply(z, FUN = function(x) {
ordinal.value <- 1
index <- 1
while(index <= length(threshold) && x > threshold[index]) {
ordinal.value <- ordinal.value + 1
index <- index + 1
}
ordinal.value
})
}
# Function to simulate the data from Example 5 in Dungang and Zhang (2017).
simProportionalityData <- function(n = 2000) {
x <- runif(n, min = -3, max = 3)
z1 <- 0 - 1 * x + rnorm(n)
z2 <- 0 - 1.5 * x + rnorm(n)
y1 <- ordinalize(z1, threshold = c(-1.5, 0))
y2 <- ordinalize(z2, threshold = c(1, 3))
data.frame("y" = as.ordered(c(y1, y2)), "x" = c(x, x))
}
# Simulate data
set.seed(977)
df4 <- simProportionalityData(n = 2000)
table(df4$y)
# Fit separate models (VGAM should already be loaded)
fit1 <- vglm(y ~ x, data = df4[1:2000, ],
cumulative(link = probit, parallel = TRUE))
fit2 <- update(fit1, data = df4[2001:4000, ])
# Generate surrogate response values
set.seed(8671)  # for reproducibility
s1 <- surrogate(fit1)
s2 <- surrogate(fit2)
# Figure 8
pdf(file = "proportionality.pdf", width = 7, height = 5)
ggplot(data.frame(D = s1 - s2, x = df4[1:2000, ]$x) , aes(x = x, y = D)) +
geom_point(color = "#444444", shape = 19, size = 2) +
geom_smooth(se = FALSE, size = 1.2, color = "red")
dev.off()
ggplot(data.frame(D = s1 - s2, x = df4[1:2000, ]$x) , aes(x = x, y = D)) +
geom_point(color = "#444444", shape = 19, size = 2) +
geom_smooth(se = FALSE, size = 1.2, color = "red")
?VGAM::vglm
# Obtain surrogate residuals
library(sure)
set.seed(101)  # for reproducibility
sres <- resids(fit.polr)
# Residual vs. covariate plot and Q-Q plot
library(ggplot2)  # needed for autoplot function
p1 <- autoplot(sres, what = "covariate", x = df1$x, xlab = "x")
p2 <- autoplot(sres, what = "qq", distribution = qnorm)
grid.arrange(p1, p2, ncol = 2)  # Figure 2
library(sure)
library(ggplot2)
library(rms)  # for orm function
fit.orm <- orm(y ~ x, data = df2, family = "probit", x = TRUE)
set.seed(102)  # for reproducibility
p1 <- autoplot(resids(fit.orm), what = "covariate", x = df2$x, xlab = "x")
p2 <- ggplot(data.frame(x = df2$x, y = presid(fit.orm)), aes(x, y)) +
geom_point(color = "#444444", shape = 19, size = 2, alpha = 0.25) +
geom_smooth(col = "red", se = FALSE) +
ylab("Probability scale residual")
grid.arrange(p1, p2, ncol = 2)  # Figure 4
library(PResiduals)
set.seed(102)  # for reproducibility
p1 <- autoplot(resids(fit.orm), what = "covariate", x = df2$x, xlab = "x")
p2 <- ggplot(data.frame(x = df2$x, y = presid(fit.orm)), aes(x, y)) +
geom_point(color = "#444444", shape = 19, size = 2, alpha = 0.25) +
geom_smooth(col = "red", se = FALSE) +
ylab("Probability scale residual")
grid.arrange(p1, p2, ncol = 2)  # Figure 4
library(ordinal)  # for clm function
fit1 <- clm(y ~ x1, data = df5[df5$x2 == "Control", ], link = "probit")
fit2 <- clm(y ~ x1, data = df5[df5$x2 == "Treatment", ], link = "probit")
set.seed(1105)  # for reproducibility
d1 <- cbind(df5[df5$x2 == "Control",], sur = surrogate(fit1, nsim = 25))
d2 <- cbind(df5[df5$x2 == "Treatment", ], sur = surrogate(fit2, nsim = 25))
p1 <- ggplot(d1, aes(x = x1, y = sur)) +
geom_point(color = "#444444", shape = 19, size = 2, alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1], " (control)")))
p2 <- ggplot(d2, aes(x = x1, y = sur)) +
geom_point(color = "#444444", shape = 19, size = 2, alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1], " (treatment)")))
grid.arrange(p1, p2, nrow = 2)  # Figure 9
grid.arrange(p1, p2, ncol = 2)  # Figure 9
# Fit separate models (VGAM should already be loaded)
fit1 <- vglm(y ~ x, data = df4[1:2000, ],
cumulative(link = probit, parallel = TRUE))
fit2 <- update(fit1, data = df4[2001:4000, ])
# Generate surrogate response values
set.seed(8671)  # for reproducibility
s1 <- surrogate(fit1)
s2 <- surrogate(fit2)
# Figure 8
ggplot(data.frame(D = s1 - s2, x = df4[1:2000, ]$x) , aes(x = x, y = D)) +
geom_point(color = "#444444", shape = 19, size = 2) +
geom_smooth(se = FALSE, size = 1.2, color = "red")
fit1 <- vglm(y ~ x, data = df4[1:2000, ],
cumulative(link = probit, parallel = TRUE))
library(VGAM)
# Fit separate models (VGAM should already be loaded)
fit1 <- vglm(y ~ x, data = df4[1:2000, ],
cumulative(link = probit, parallel = TRUE))
fit2 <- update(fit1, data = df4[2001:4000, ])
# Generate surrogate response values
set.seed(8671)  # for reproducibility
s1 <- surrogate(fit1)
s2 <- surrogate(fit2)
# Figure 8
ggplot(data.frame(D = s1 - s2, x = df4[1:2000, ]$x) , aes(x = x, y = D)) +
geom_point(color = "#444444", shape = 19, size = 2) +
geom_smooth(se = FALSE, size = 1.2, color = "red")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("bibtex")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("rcrossref")
source('~/.active-rstudio-document', echo=TRUE)
check_doi(file.choose())
install.packages("rpartScore")
data("birthwt",package="MASS")
birthwt$Category.s <- ifelse(birthwt$bwt <= 2500, 3,
ifelse(birthwt$bwt <= 3000, 2,
ifelse(birthwt$bwt <= 3500, 1, 0)))
T.abs.mc <- rpartScore(Category.s ~ age + lwt + race + smoke +
ptl + ht + ui + ftv, data = birthwt)
plotcp(T.abs.mc)
T.abs.mc.pruned<-prune(T.abs.mc,cp=0.02)
plot(T.abs.mc.pruned)
text(T.abs.mc.pruned)
library(rpartScore)
data("birthwt",package="MASS")
birthwt$Category.s <- ifelse(birthwt$bwt <= 2500, 3,
ifelse(birthwt$bwt <= 3000, 2,
ifelse(birthwt$bwt <= 3500, 1, 0)))
T.abs.mc <- rpartScore(Category.s ~ age + lwt + race + smoke +
ptl + ht + ui + ftv, data = birthwt)
plotcp(T.abs.mc)
T.abs.mc.pruned<-prune(T.abs.mc,cp=0.02)
plot(T.abs.mc.pruned)
text(T.abs.mc.pruned)
head(birthwt)
polr
library(MASS)
fit <- polr(Category.s ~ age + lwt + race + smoke +
+ ptl + ht + ui + ftv, data = birthwt)
fit <- polr(as.ordered(Category.s) ~ age + lwt + race + smoke +
+ ptl + ht + ui + ftv, data = birthwt)
library(sure)
library(ggplot2)
autoplot(fit, what = "qq")
autoplot(fit, what = "fitted")
autoplot(fit, what = "covariate", x = birthwt$age)
autoplot(fit, what = "covariate", x = birthwt$lwt)
autoplot(fit, what = "covariate", x = birthwt$race)

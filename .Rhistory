autoplot(wine.clm, nsim = 10, what = "cov", x = wine$temp,
xlab = "Temperature"),
autoplot(wine.clm, nsim = 10, what = "cov", x = wine$contact,
xlab = "Contact"),
ncol = 2
)
dev.off()
plot(gof(wine.clm, nsim = 500))
set.seed(1105)
p1 <- ggplot(cbind(df4, sur = surrogate(fit1, nsim = 25)), aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
facet_wrap( ~ x2) +
ylab("Surrogate residual")
p2 <- ggplot(cbind(df4, sur = surrogate(fit2, nsim = 25)), aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
facet_wrap( ~ x2) +
ylab("Surrogate residual")
grid.arrange(p1, p2, nrow = 2)
fit1 <- clm(y ~ x1 + x2, data = df4, link = "probit")  # wrong model
fit2 <- clm(y ~ x1*x2, data = df4, link = "probit")  # correct model
ggplot(cbind(df4, sur = surrogate(fit1, nsim = 25)), aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
facet_wrap( ~ x2) +
ylab("Surrogate residual")
simInteractionData <- function(n = 2000) {
threshold <- c(0, 20, 40)
x1 <- runif(n, min = 1, max = 7)
x2 <- gl(2, n / 2, labels = c("Control", "Treatment"))
z <- 16 - 5 * x1 + 3 * (x2 == "Treatment") + 10 * x1 * (x2 == "Treatment") +
rnorm(n)
y <- sapply(z, FUN = function(zz) {
ordinal.value <- 1
index <- 1
while(index <= length(threshold) && zz > threshold[index]) {
ordinal.value <- ordinal.value + 1
index <- index + 1
}
ordinal.value
})
data.frame("y" = as.ordered(y), "x1" = x1, "x2" = x2)
}
# Simulate data
set.seed(977)
df4 <- simInteractionData(n = 2000)
table(df4$y)
fit1 <- clm(y ~ x1 + x2, data = df4, link = "probit")  # wrong model
fit2 <- clm(y ~ x1*x2, data = df4, link = "probit")  # correct model
ggplot(cbind(df4, sur = surrogate(fit1, nsim = 25)), aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
facet_wrap( ~ x2) +
ylab("Surrogate residual")
ggplot(cbind(df4, sur = surrogate(fit2, nsim = 25)), aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
facet_wrap( ~ x2) +
ylab("Surrogate residual")
simInteractionData <- function(n = 2000) {
threshold <- c(0, 20, 40)
x1 <- runif(n, min = 1, max = 7)
x2 <- gl(2, n / 2, labels = c("Control", "Treatment"))
z <- 16 - 5 * x1 + 3 * (x2 == "Treatment") + 10 * x1 * (x2 == "Treatment") +
rnorm(n)
y <- sapply(z, FUN = function(zz) {
ordinal.value <- 1
index <- 1
while(index <= length(threshold) && zz > threshold[index]) {
ordinal.value <- ordinal.value + 1
index <- index + 1
}
ordinal.value
})
data.frame("y" = as.ordered(y), "x1" = x1, "x2" = x2)
}
# Simulate data
set.seed(977)
df4 <- simInteractionData(n = 2000
library(ggplot2)
library(ordinal)
library(sure)
fit1 <- clm(y ~ x1, data = df4[df4$x2=="Control",], link = "probit")
fit2 <- clm(y ~ x1, data = df4[df4$x2=="Treatment",], link = "probit")
fit3 <- clm(y ~ x1*x2, data = df4, link = "probit")
set.seed(1105)
p1 <- ggplot(cbind(df4[df4$x2=="Control",], sur = surrogate(fit1, nsim = 25)), aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate variable")+xlab("x1 (x2=Control)")
p2 <- ggplot(cbind(df4[df4$x2=="Treatment",], sur = surrogate(fit2, nsim = 25)), aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate variable")+xlab("x1 (x2=Treatment)")
grid.arrange(p1, p2, ncol = 2)
fit1
fit3
fit2
ggplot(d2, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(x[1]))
d2 <- cbind(df4[df4$x2 == "Treatment", ], sur = surrogate(fit2, nsim = 25))
ggplot(d2, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(x[1]))
ggplot(d2, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(paste(expression(x[1])), "(treatment)")
ggplot(d2, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(paste(expression(x[1]), "(treatment)"))
ggplot(d2, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1]), "(treatment)"))
ggplot(d2, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1], "(treatment)")))
set.seed(1105)
d1 <- cbind(df4[df4$x2 == "Control",], sur = surrogate(fit1, nsim = 25))
d2 <- cbind(df4[df4$x2 == "Treatment", ], sur = surrogate(fit2, nsim = 25))
p1 <- ggplot(d1, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1], " (control)")))
p2 <- ggplot(d2, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1], " (treatment)")))
grid.arrange(p1, p2, ncol = 2)
?clm
?lm
?glm.convert
?nls
set.seed(1105)
d1 <- cbind(df4[df4$x2 == "Control",], sur = surrogate(fit1, nsim = 25))
d2 <- cbind(df4[df4$x2 == "Treatment", ], sur = surrogate(fit2, nsim = 25))
p1 <- ggplot(d1, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1], " (control)")))
p2 <- ggplot(d2, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1], " (treatment)")))
pdf(file = "interaction.pdf", width = 7, height = 7)
grid.arrange(p1, p2, ncol = 2)
dev.off()
fit <- clm(y ~ x1/x2, data = df4)
fit
pdf(file = "interaction.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)
dev.off()
x <- c(0.4, 0.7, 1.3, 2.8, 3.9, 6.0, 6.1)
mean(x)
median(x)
sd(x)
mean(100*x)
msd(100*x)
sd(100*x)
# Load the data set
ultra <- read.csv(file = file.choose(), header = TRUE)
# Create a new variable called time; use $ to access the different columns
ultra$time <- ultra$hours * 60 + ultra$minutes + ultra$seconds / 60
# Recode gender to somethinf more meaningful
ultra$gender <- ifelse(ultra$gender == 0, "male", "female")
# Print the first 6 rows
head(ultra)
# Print a summary of the the data set
summary(ultra)
# To compute the sample variance/standard deviation use the var/sd functions.
# For example, to get the sample variance for the variable age, use:
var(ultra$age)
# To get the sample variance for each variable use
sapply(ultra, FUN = var)
mean(ultra$time)
mean(ultra$age)
which.min(ultra$time)
which.min(ultra$hours)
which.max(ultra$hours)
plot(age ~ time, data = ultea)
plot(age ~ time, data = ultra)
min(ultra$hours)
min(ultra$time)
# Subset the data by gender
males <- ultra[ultra$gender == "male", ]
females <- ultra[ultra$gender == "female", ]
# Compute the mean time for males
cat("The average time for males was", mean(males$time), "minutes \n")
# Compute the standard deviation of male times
cat("The standard deviation for male times was", sd(males$time), "minutes \n")
# Compute the mean time for females
cat("The average time for females was", mean(females$time), "minutes \n")
# Compute the standard deviation of female times
cat("The standard deviation for female times was", sd(females$time), "minutes \n")
# Histograms of running times for males and females
par(mfrow = c(1, 2))
hist(males$time, main = "Males", xlab = "Running time")
hist(females$time, main = "Females", xlab = "Running time")
boxplot(time ~ gender, data = ultra, notch = TRUE)
boxplot(time ~ gender, data = ultra, notch = TRUE)
histogram(~ time | gender, data = ultra, xlab = "Running time")
library(lattice)
histogram(~ time | gender, data = ultra, xlab = "Running time")
x <- c(105, 124, 102, 114, 96, 106)
c(mean(x), median(x), sd(x))
x - mean(x)
(x - mean(x))^2
sort(x)
source('C:/Users/greenweb/Desktop/devel/sure-manuscript/greenwell-mccarthy-boehmke-liu.R', echo=TRUE)
# Fit models with various link functions to the simulated data
fit.probit <- polr(y ~ x + I(x ^ 2), data = df3, method = "probit")
fit.logistic <- polr(y ~ x + I(x ^ 2), data = df3, method = "logistic")
fit.loglog <- polr(y ~ x + I(x ^ 2), data = df3, method = "loglog")  # correct link
fit.cloglog <- polr(y ~ x + I(x ^ 2), data = df3, method = "cloglog")
# Construc Q-Q plots of the surrogate residuals for each model
p1 <- autoplot(fit.probit, nsim = 100, what = "qq")
p2 <- autoplot(fit.logistic, nsim = 100, what = "qq")
p3 <- autoplot(fit.loglog, nsim = 100, what = "qq")
p4 <-  autoplot(fit.cloglog, nsim = 100, what = "qq")
# Figure ?
pdf(file = "link.pdf", width = 7, height = 7)
grid.arrange(p1, p2, p3, p4, ncol = 2)  # bottom left plot is correct model
dev.off()
# Figure ?
pdf(file = "gof.pdf", width = 7, height = 7)
par(mfrow = c(2, 2), mar = c(4, 4, 2, 2) + 0.1)
set.seed(8491)  # for reproducibility
plot(gof(fit.probit, nsim = 100, test = "ad"), main = "")
plot(gof(fit.logistic, nsim = 100, test = "ad"), main = "")
plot(gof(fit.loglog, nsim = 100, test = "ad"), main = "")
plot(gof(fit.cloglog, nsim = 100, test = "ad"), main = "")
dev.off()
################################################################################
# Interaction detection
################################################################################
# Function to simulate data from an ordered probit model with an interaction
# term
simInteractionData <- function(n = 2000) {
threshold <- c(0, 20, 40)
x1 <- runif(n, min = 1, max = 7)
x2 <- gl(2, n / 2, labels = c("Control", "Treatment"))
z <- 16 - 5 * x1 + 3 * (x2 == "Treatment") + 10 * x1 * (x2 == "Treatment") +
rnorm(n)
y <- sapply(z, FUN = function(zz) {
ordinal.value <- 1
index <- 1
while(index <= length(threshold) && zz > threshold[index]) {
ordinal.value <- ordinal.value + 1
index <- index + 1
}
ordinal.value
})
data.frame("y" = as.ordered(y), "x1" = x1, "x2" = x2)
}
# Simulate data
set.seed(977)
df4 <- simInteractionData(n = 2000)
library(ggplot2)
library(ordinal)
library(sure)
fit1 <- clm(y ~ x1, data = df4[df4$x2 == "Control", ], link = "probit")
fit2 <- clm(y ~ x1, data = df4[df4$x2 == "Treatment", ], link = "probit")
fit3 <- clm(y ~ x1*x2, data = df4, link = "probit")
set.seed(1105)
d1 <- cbind(df4[df4$x2 == "Control",], sur = surrogate(fit1, nsim = 25))
d2 <- cbind(df4[df4$x2 == "Treatment", ], sur = surrogate(fit2, nsim = 25))
p1 <- ggplot(d1, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1], " (control)")))
p2 <- ggplot(d2, aes(x = x1, y = sur)) +
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1], " (treatment)")))
pdf(file = "interaction.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)
dev.off()
################################################################################
# Quality of wine
################################################################################
data(wine, package = "ordinal")
wine.clm <- clm(rating ~ temp + contact, data = wine, link = "probit")
# Figure ?
pdf(file = "wine.pdf", width = 7, height = 5)
set.seed(1225)  # for reproducibility
grid.arrange(
autoplot(wine.clm, nsim = 10, what = "qq"),
autoplot(wine.clm, nsim = 10, what = "fitted", alpha = 0.5),
autoplot(wine.clm, nsim = 10, what = "covariate", x = wine$temp,
xlab = "Temperature"),
autoplot(wine.clm, nsim = 10, what = "covariate", x = wine$contact,
xlab = "Contact"),
ncol = 2
)
dev.off()
ordinalize <- function(z, threshold) {
sapply(z, FUN = function(x) {
ordinal.value <- 1
index <- 1
while(index <= length(threshold) && x > threshold[index]) {
ordinal.value <- ordinal.value + 1
index <- index + 1
}
ordinal.value
})
}
# Function to simulate the data from Example 5 in Dungang and Zhang (2017).
simProportionalityData <- function(n = 2000) {
x <- runif(n, min = -3, max = 3)
z1 <- 0 - 1 * x + rnorm(n)
z2 <- 0 - 1.5 * x + rnorm(n)
y1 <- ordinalize(z1, threshold = c(-1.5, 0))
y2 <- ordinalize(z2, threshold = c(1, 3))
data.frame("y" = as.ordered(c(y1, y2)), "x" = c(x, x))
}
# Simulate data
set.seed(977)
df4 <- simProportionalityData(n = 2000)
table(df4$y)
# Fit separate models to the df4 data set and genrate the difference in
# surrogate values
fit1 <- vglm(y ~ x, data = df4[1:2000, ],
cumulative(link = probit, parallel = TRUE))
fit2 <- update(fit1, data = df4[2001:4000, ])
s1 <- surrogate(fit1)
s2 <- surrogate(fit2)
d <- data.frame(D = s1 - s2, X = df4[1:2000, ]$x)
# Scatterplot of D vs. X
p <- ggplot(d, aes(x = X, y = D)) +
geom_point() +
geom_smooth(se = FALSE, size = 1.2, color = "red")
# Figure ?
pdf(file = "proportionality.pdf", width = 7, height = 5)
print(p)
dev.off()
?set.seed
source('C:/Users/greenweb/Desktop/devel/sure-manuscript/greenwell-mccarthy-boehmke-liu.R', echo=TRUE)
# Fit separate models to the df4 data set and genrate the difference in
# surrogate values
fit1 <- vglm(y ~ x, data = df4[1:2000, ],
cumulative(link = probit, parallel = TRUE))
fit2 <- update(fit1, data = df4[2001:4000, ])
s1 <- surrogate(fit1)
s2 <- surrogate(fit2)
d <- data.frame(D = s1 - s2, x = df4[1:2000, ]$x)
# Scatterplot of D vs. x
p <- ggplot(d, aes(x = x, y = D)) +
geom_point(color = "#444444", shape = 19, size = 2) +
geom_smooth(se = FALSE, size = 1.2, color = "red")
# Figure ?
pdf(file = "proportionality.pdf", width = 7, height = 5)
print(p)
dev.off()
# Simulate data
set.seed(977)
df4 <- simProportionalityData(n = 2000)
table(df4$y)
# Fit separate models to the df4 data set and genrate the difference in
# surrogate values
fit1 <- vglm(y ~ x, data = df4[1:2000, ],
cumulative(link = probit, parallel = TRUE))
fit2 <- update(fit1, data = df4[2001:4000, ])
s1 <- surrogate(fit1)
s2 <- surrogate(fit2)
d <- data.frame(D = s1 - s2, x = df4[1:2000, ]$x)
# Scatterplot of D vs. x
p <- ggplot(d, aes(x = x, y = D)) +
geom_point(color = "#444444", shape = 19, size = 2) +
geom_smooth(se = FALSE, size = 1.2, color = "red")
# Figure ?
pdf(file = "proportionality.pdf", width = 7, height = 5)
print(p)
dev.off()
source('C:/Users/greenweb/Desktop/devel/sure-manuscript/greenwell-mccarthy-boehmke-liu.R', echo=TRUE)
# Simulate data
set.seed(977)
df4 <- simInteractionData(n = 2000)
library(ordinal)  # for clm function
fit1 <- clm(y ~ x1, data = df4[df4$x2 == "Control", ], link = "probit")
fit2 <- clm(y ~ x1, data = df4[df4$x2 == "Treatment", ], link = "probit")
set.seed(1105)  # for reproducibility
d1 <- cbind(df4[df4$x2 == "Control",], sur = surrogate(fit1, nsim = 25))
d2 <- cbind(df4[df4$x2 == "Treatment", ], sur = surrogate(fit2, nsim = 25))
p1 <- ggplot(d1, aes(x = x1, y = sur)) +
geom_point(color = "#444444", shape = 19, size = 2, alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1], " (control)")))
p2 <- ggplot(d2, aes(x = x1, y = sur)) +
geom_point(color = "#444444", shape = 19, size = 2, alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2, color = "red") +
ylab("Surrogate response") +
xlab(expression(paste(x[1], " (treatment)")))
pdf(file = "interaction.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)  # Figure 9
dev.off()
ggplot(data.frame(D = s1 - s2, x = df4[1:2000, ]$x) , aes(x = x, y = D)) +
geom_point(color = "#444444", shape = 19, size = 2) +
geom_smooth(se = FALSE)
# Simulate data
set.seed(977)
df4 <- simProportionalityData(n = 2000)
table(df4$y)
# Fit separate models (VGAM should already be loaded)
fit1 <- vglm(y ~ x, data = df4[1:2000, ],
cumulative(link = probit, parallel = TRUE))
fit2 <- update(fit1, data = df4[2001:4000, ])
# Generate surrogate response values
s1 <- surrogate(fit1)
s2 <- surrogate(fit2)
ggplot(data.frame(D = s1 - s2, x = df4[1:2000, ]$x) , aes(x = x, y = D)) +
geom_point(color = "#444444", shape = 19, size = 2) +
geom_smooth(se = FALSE)
pdf(file = "proportionality.pdf", width = 7, height = 5)
ggplot(data.frame(D = s1 - s2, x = df4[1:2000, ]$x) , aes(x = x, y = D)) +
geom_point(color = "#444444", shape = 19, size = 2) +
geom_smooth(se = FALSE, size = 1.2, color = "red")
dev.off()
library(MASS)  # for polr function
fit.polr <- polr(y ~ x + I(x ^ 2), data = df1, method = "probit")
library(sure)
set.seed(101)  # for reproducibility
sres <- resids(fit.polr)
autoplot(fit.polr, what = "qq")
autoplot(fit.polr, what = "qq")
autoplot(sres, what = "qq", distribution = pnorm)
qqnorm(sres)
res <- sres
distribution <- pnorm
x <- distribution(ppoints(length(res)))[order(order(res))]
qqline.y <- quantile(res, probs = c(0.25, 0.75),
names = FALSE, na.rm = TRUE)
qqline.x <- distribution(c(0.25, 0.75))
slope <- diff(qqline.y) / diff(qqline.x)
int <- qqline.y[1L] - slope * qqline.x[1L]
ggplot(data.frame(x = x, y = res), aes_string(x = "x", y = "y")) +
geom_point(color = qqpoint.color, shape = qqpoint.shape,
size = qqpoint.size) +
geom_abline(slope = slope, intercept = int, color = qqline.color,
linetype = qqline.linetype, size = qqline.size) +
labs(x = "Theoretical quantile", y = "Sample quantile")
ggplot(data.frame(x = x, y = res), aes_string(x = "x", y = "y")) +
geom_point() +
geom_abline(slope = slope, intercept = int, color = qqline.color,
linetype = qqline.linetype, size = qqline.size) +
labs(x = "Theoretical quantile", y = "Sample quantile")
ggplot(data.frame(x = x, y = res), aes_string(x = "x", y = "y")) +
geom_point() +
geom_abline(slope = slope, intercept = int) +
labs(x = "Theoretical quantile", y = "Sample quantile")
qqnorm
qqnorm.default
methods(qqnorm)
getAnywhere(qqnorm.default)
res <- sres
distribution <- qnorm
x <- distribution(ppoints(length(res)))[order(order(res))]
qqline.y <- quantile(res, probs = c(0.25, 0.75),
names = FALSE, na.rm = TRUE)
qqline.x <- distribution(c(0.25, 0.75))
slope <- diff(qqline.y) / diff(qqline.x)
int <- qqline.y[1L] - slope * qqline.x[1L]
ggplot(data.frame(x = x, y = res), aes_string(x = "x", y = "y")) +
geom_point() +
geom_abline(slope = slope, intercept = int) +
labs(x = "Theoretical quantile", y = "Sample quantile")
# Residual vs. covariate plot and Q-Q plot
library(ggplot2)  # needed for autoplot function
p1 <- autoplot(sres, what = "covariate", x = df1$x, xlab = "x")
p2 <- autoplot(sres, what = "qq", distribution = qnorm)
pdf(file = "quadratic-correct-surrogate.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)  # Figure 2
dev.off()
# Fit a cumulative link model with probit link
library(MASS)  # for polr function
fit.polr <- polr(y ~ x + I(x ^ 2), data = df1, method = "probit")
# Obtain the SBS/probability-scale residuals
library(PResiduals)
pres <- presid(fit.polr)
# Obtain surrogate residuals
library(sure)
set.seed(101)  # for reproducibility
sres <- resids(fit.polr)
# Residual vs. covariate plot and Q-Q plot
library(ggplot2)  # needed for autoplot function
p1 <- autoplot(sres, what = "covariate", x = df1$x, xlab = "x")
p2 <- autoplot(sres, what = "qq", distribution = qnorm)
pdf(file = "quadratic-correct-surrogate.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)  # Figure 2
dev.off()
autoplot(sres, what = "covariate", x = df1$x, xlab = "x")
sres
?autoplot.resid

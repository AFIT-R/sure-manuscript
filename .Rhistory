?MASS::polr
library(MASS)
houses.polr <- polr(Sat ~ Infl + Type + Cont, weights = Freq, data = housing)
summary(houses.polr)
plot(houses.polr)
resid(houses.polr)
residuals(houses.polr)
VGAM::resid(houses.polr)
?VGAM::resid
?VGAM::residuals
VGAM::residuals
showMethods(VGAM::residuals)
VGAM::residuals.vglm
VGAM:::residuals.vglm
getAnywhere(residuals.vglm)
library(VGAM)
getAnywhere(residuals.vglm)
?ordr::gof
source('C:/Users/greenweb/Desktop/manuscript/rcode.R', echo=TRUE)
pdf(file = "heteroscedasticity.pdf", width = 7, height = 5)
autoplot(fit.polr, what = "fitted")
dev.off()
?autoplot.resid
coef(fit.polr)
?quantile
quantile(rnorm(100))
set.seed(123)
n     <- 2000
x    <- runif(n, 2, 7)
y.con <- 36 + 4 * x + rnorm(N, mean = 0, sd = x ^ 2)
y.ord <- cut(y.con, breaks = quantile(y.con), include.lowest = TRUE,
labels = 1:5, ordered = TRUE)
y.con <- 36 + 4 * x + rnorm(n, mean = 0, sd = x ^ 2)
y.ord <- cut(y.con, breaks = quantile(y.con), include.lowest = TRUE,
labels = 1:5, ordered = TRUE)
quantile(y.con)
y.ord <- cut(y.con, breaks = quantile(y.con), include.lowest = F,
labels = 1:5, ordered = TRUE)
?cut
?quantile
y.ord <- cut(y.con, breaks = quantile(y.con, probs = seq(0, 1, len = 6)), include.lowest = TRUE,
labels = 1:5, ordered = TRUE)
d <- data.frame(x = x, y = y)
d <- data.frame(x = x, y = y.ord)
fit.polr <- MASS::polr(formula = y ~ x, data = d, method = "probit")
fit.polr
table(y.ord)
autoplot(fit.polr, what = "fitted")
fit.polr <- MASS::polr(formula = y ~ x, data = df.ord, method = "probit")
set.seed(123)
n <- 2000
x <- runif(n, min = 2, max = 7)
y.con <- 36 + 4 * x + rnorm(n, mean = 0, sd = x ^ 2)
y.ord <- cut(y.con, breaks = quantile(y.con, probs = seq(0, 1, len = 6)),
include.lowest = TRUE, labels = 1:5, ordered = TRUE)
df.ord <- data.frame(x = x, y = y.ord)
fit.polr <- MASS::polr(formula = y ~ x, data = df.ord, method = "probit")
autoplot(fit.polr, what = "fitted")
class(df.ord)
head(df.ord)
table(df.ord$y)
# noise; the ordinal outcome W is obtained by discretizing Z.
simData <- function(n = 2000, alpha = 36, beta = 4,
threshold = c(0, 30, 70, 100)) {
x <- runif(n, min = 2, max = 7)
z <- alpha + beta * x + rnorm(n, mean = 0, sd = x ^ 2)
y <-   sapply(z, FUN = function(zz) {
ordinal.value <- 1
index <- 1
while(index <= length(threshold) && zz > threshold[index]) {
ordinal.value <- ordinal.value + 1
index <- index + 1
}
ordinal.value
})
data.frame("y" = as.ordered(y), "x" = x)
}
# Simulate data
set.seed(108)
d <- simData(n = 2000)
table(d$y)
fit.polr <- MASS::polr(formula = y ~ x, data = d, method = "probit")
autoplot(fit.polr, what = "fitted")
set.seed(101)
n <- 2000
x <- runif(n, min = 2, max = 7)
y.con <- 36 + 4 * x + rnorm(n, mean = 0, sd = x ^ 2)
y.ord <- cut(y.con, breaks = quantile(y.con, probs = seq(0, 1, len = 6)),
include.lowest = TRUE, labels = 1:5, ordered = TRUE)
df.ord <- data.frame(x = x, y = y.ord)
# Simulate data
set.seed(108)
d <- simData(n = 2000)
table(d$y)
fit.polr <- MASS::polr(formula = y ~ x, data = d, method = "probit")
pdf(file = "heteroscedasticity.pdf", width = 7, height = 5)
autoplot(fit.polr, what = "fitted")
dev.off()
# Load required packages
library(ggplot2)
# library(MASS)
# library(ordinal)
# library(VGAM)
library(ordr)
################################################################################
# Detecting heteroscedasticty
################################################################################
# Simulate data
set.seed(101)
n <- 2000
x <- runif(n, min = 2, max = 7)
y.con <- 36 + 4 * x + rnorm(n, mean = 0, sd = x ^ 2)
y.ord <- cut(y.con, breaks = quantile(y.con, probs = seq(0, 1, len = 6)),
include.lowest = TRUE, labels = 1:5, ordered = TRUE)
df.ord <- data.frame(x = x, y = y.ord)
# Simulate data
set.seed(108)
d <- simData(n = 2000)
table(d$y)
fit.polr <- MASS::polr(formula = y ~ x, data = d, method = "probit")
fit.polr <- MASS::polr(formula = y ~ x, data = df.ord, method = "probit")
autoplot(fit.polr, what = "fitted")
# Simulate data
set.seed(101)
n <- 2000
x <- runif(n, min = 2, max = 7)
y.con <- 36 + 4 * x + rnorm(n, mean = 0, sd = x ^ 2)
y.ord <- cut(y.con, breaks = quantile(y.con, probs = seq(0, 1, len = 6)),
include.lowest = TRUE, labels = 1:5, ordered = TRUE)
df.ord <- data.frame(x = x, y = y.ord)
fit.polr <- MASS::polr(formula = y ~ x, data = df.ord, method = "probit")
pdf(file = "heteroscedasticity.pdf", width = 7, height = 5)
autoplot(fit.polr, what = "fitted")
dev.off()
autoplot(fit.polr, what = "fitted")
autoplot(fit.polr, what = "fitted", nsim = 100)
autoplot(fit.polr, what = "fitted", nsim = 10, alpha = 0.1)
# Simulate data
set.seed(101)
n <- 2000
x <- runif(n, min = 2, max = 7)
y.con <- 36 + 4 * x + rnorm(n, mean = 0, sd = x ^ 2)
y.ord <- cut(y.con, breaks = quantile(y.con, probs = seq(0, 1, len = 6)),
include.lowest = TRUE, labels = 1:5, ordered = TRUE)
df.ord <- data.frame(x = x, y = y.ord)
fit.polr <- MASS::polr(formula = y ~ x, data = df.ord, method = "probit")
autoplot(fit.polr, what = "fitted")
simData <- function(n = 2000, alpha = 36, beta = 4,
threshold = c(0, 30, 70, 100)) {
x <- runif(n, min = 2, max = 7)
y <-   sapply(alpha + beta * x + rnorm(n, sd = x ^ 2), FUN = function(zz) {
ordinal.value <- 1
index <- 1
while(index <= length(threshold) && zz > threshold[index]) {
ordinal.value <- ordinal.value + 1
index <- index + 1
}
ordinal.value
})
data.frame("y" = as.ordered(y), "x" = x)
}
# Simulate data
set.seed(108)
d <- simData(n = 2000)
table(d$y)
fit.polr <- MASS::polr(formula = y ~ x, data = d, method = "probit")
autoplot(fit.polr, what = "fitted")
autoplot(fit.polr, what = "fitted", nsim = 10, alpha = 0.2)
autoplot(fit.polr, what = "fitted", nsim = 10, alpha = 0.05)
source('C:/Users/greenweb/Desktop/devel/ordr/R/autoplot.R', echo=TRUE)
autoplot(fit.polr, what = "fitted", nsim = 10, alpha = 0.1)
